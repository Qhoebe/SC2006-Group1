{"ast":null,"code":"export async function facilityLocator(lat, lng, facilityType, range) {\n  try {\n    // Construct the search URL\n    const searchParams = new URLSearchParams({\n      location: `${lat},${lng}`,\n      key: \"AIzaSyBQIjmVOaNYjue75PAQmy49Urzr0PnCtrw\",\n      query: facilityType\n    });\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?${searchParams.toString()}`;\n\n    // Fetch data from the Google Maps API\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?${searchParams.toString()}`, {\n      method: \"POST\"\n    });\n    const data = await response.json();\n    console.log(\"asas\");\n    console.log(data);\n    // Error handling\n    if (data.status === \"REQUEST_DENIED\") {\n      return {\n        status: \"REQUEST_DENIED\",\n        error_message: data.error_message\n      };\n    }\n\n    // Process successful results\n    if (data.status === \"OK\") {\n      const results = data.results.map(result => {\n        return {\n          formatted_address: result.formatted_address,\n          lat: result.geometry.location.lat,\n          lng: result.geometry.location.lng,\n          name: result.name\n        };\n      });\n      return {\n        status: \"OK\",\n        results\n      };\n    }\n\n    // Catch any other errors\n  } catch (error) {\n    return {\n      status: \"REQUEST_DENIED\",\n      error_message: \"Error\"\n    };\n  }\n}\nexport async function test(x) {\n  console.log(x);\n  return {\n    message: x\n  };\n}\n\n// async function main() {\n//   const latlng = \"1.347169 103.680133\";\n\n//   //replace space with ,\n//   // const latlngArray = latlng.split(\" \").join(\",\")\n\n//   const response = await facilityLocator(\n//     1.347169,\n//     103.680133,\n//     \"Petrol Station\",\n//   );\n\n//   for (const result of response.results) {\n//     console.log(result.name);\n//     console.log(result.formatted_address);\n//   }\n// }\n\n// main();","map":{"version":3,"names":["facilityLocator","lat","lng","facilityType","range","searchParams","URLSearchParams","location","key","query","url","toString","response","fetch","method","data","json","console","log","status","error_message","results","map","result","formatted_address","geometry","name","error","test","x","message"],"sources":["C:/Users/Belvedere Song/Documents/NTU/SoftwareEngineering/project/SC2006-Group1/src/client/src/utils/googlePlaces.js"],"sourcesContent":["\r\n export async function facilityLocator(lat, lng, facilityType,range) {\r\n  try {\r\n    // Construct the search URL\r\n    const searchParams = new URLSearchParams({\r\n      location: `${lat},${lng}`,\r\n      key: \"AIzaSyBQIjmVOaNYjue75PAQmy49Urzr0PnCtrw\",\r\n      query: facilityType,\r\n    });\r\n\r\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?${searchParams.toString()}`;\r\n\r\n\r\n    // Fetch data from the Google Maps API\r\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?${searchParams.toString()}`, {\r\n      method: \"POST\",\r\n    })\r\n  \r\n    const data = await response.json();\r\n    console.log(\"asas\");\r\n    console.log(data);\r\n    // Error handling\r\n    if (data.status === \"REQUEST_DENIED\") {\r\n      return { status: \"REQUEST_DENIED\", error_message: data.error_message };\r\n    }\r\n\r\n    // Process successful results\r\n    if (data.status === \"OK\") {\r\n      const results = data.results.map((result) => {\r\n\r\n        return {\r\n          formatted_address: result.formatted_address,\r\n          lat: result.geometry.location.lat,\r\n          lng: result.geometry.location.lng,\r\n          name: result.name,\r\n        };\r\n      });\r\n      return { status: \"OK\", results };\r\n    }\r\n\r\n    // Catch any other errors\r\n  } catch (error) {\r\n    return { status: \"REQUEST_DENIED\", error_message: \"Error\" };\r\n  }\r\n}\r\n\r\n\r\nexport async function test(x){\r\n console.log(x)\r\n\r\n return {message: x}\r\n}\r\n\r\n// async function main() {\r\n//   const latlng = \"1.347169 103.680133\";\r\n\r\n//   //replace space with ,\r\n//   // const latlngArray = latlng.split(\" \").join(\",\")\r\n\r\n//   const response = await facilityLocator(\r\n//     1.347169,\r\n//     103.680133,\r\n//     \"Petrol Station\",\r\n//   );\r\n\r\n//   for (const result of response.results) {\r\n//     console.log(result.name);\r\n//     console.log(result.formatted_address);\r\n//   }\r\n// }\r\n\r\n// main();\r\n"],"mappings":"AACC,OAAO,eAAeA,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAEC,YAAY,EAACC,KAAK,EAAE;EACnE,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAAC;MACvCC,QAAQ,EAAG,GAAEN,GAAI,IAAGC,GAAI,EAAC;MACzBM,GAAG,EAAE,yCAAyC;MAC9CC,KAAK,EAAEN;IACT,CAAC,CAAC;IAEF,MAAMO,GAAG,GAAI,8DAA6DL,YAAY,CAACM,QAAQ,CAAC,CAAE,EAAC;;IAGnG;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8DAA6DR,YAAY,CAACM,QAAQ,CAAC,CAAE,EAAC,EAAE;MACpHG,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnBD,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB;IACA,IAAIA,IAAI,CAACI,MAAM,KAAK,gBAAgB,EAAE;MACpC,OAAO;QAAEA,MAAM,EAAE,gBAAgB;QAAEC,aAAa,EAAEL,IAAI,CAACK;MAAc,CAAC;IACxE;;IAEA;IACA,IAAIL,IAAI,CAACI,MAAM,KAAK,IAAI,EAAE;MACxB,MAAME,OAAO,GAAGN,IAAI,CAACM,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;QAE3C,OAAO;UACLC,iBAAiB,EAAED,MAAM,CAACC,iBAAiB;UAC3CvB,GAAG,EAAEsB,MAAM,CAACE,QAAQ,CAAClB,QAAQ,CAACN,GAAG;UACjCC,GAAG,EAAEqB,MAAM,CAACE,QAAQ,CAAClB,QAAQ,CAACL,GAAG;UACjCwB,IAAI,EAAEH,MAAM,CAACG;QACf,CAAC;MACH,CAAC,CAAC;MACF,OAAO;QAAEP,MAAM,EAAE,IAAI;QAAEE;MAAQ,CAAC;IAClC;;IAEA;EACF,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,OAAO;MAAER,MAAM,EAAE,gBAAgB;MAAEC,aAAa,EAAE;IAAQ,CAAC;EAC7D;AACF;AAGA,OAAO,eAAeQ,IAAIA,CAACC,CAAC,EAAC;EAC5BZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAAC;EAEd,OAAO;IAACC,OAAO,EAAED;EAAC,CAAC;AACpB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}